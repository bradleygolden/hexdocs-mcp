name: Build, Test, and Release

on:
  push:
    tags:
      - 'v*'
    branches:
      - main

permissions:
  contents: write

jobs:
  build:
    name: Build Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: goto-bus-stop/setup-zig@v2
        with:
          version: 0.14.0

      - run: sudo apt-get -y install xz-utils

      - uses: erlef/setup-beam@v1
        with:
          otp-version: '27'
          elixir-version: '1.18'

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          mix local.hex --force
          mix local.rebar --force
          mix deps.get

      - name: Build release with Burrito
        run: |
          mix deps.compile
          MIX_ENV=prod mix release

      - name: Generate checksums
        run: |
          cd burrito_out
          node -e '
            const crypto = require("crypto");
            const fs = require("fs");
            const files = ["hexdocs_mcp_windows.exe", "hexdocs_mcp_linux", "hexdocs_mcp_macos", "hexdocs_mcp_macos_arm"];
            const checksums = files.map(file => {
              try {
                const hash = crypto.createHash("sha256");
                const data = fs.readFileSync(file);
                hash.update(data);
                return `${hash.digest("hex")}  ${file}`;
              } catch (error) {
                console.error(`Error processing ${file}:`, error);
                process.exit(1);
              }
            });
            fs.writeFileSync("SHA256SUMS", checksums.join("\n") + "\n");
          '
          cd ..

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Export public key and sign checksums
        run: |
          cd burrito_out
          # Export the public key
          gpg --armor --export ${{ secrets.GPG_KEY_ID }} > SIGNING_KEY.asc
          # Sign the checksums
          gpg --detach-sign --armor SHA256SUMS
          cd ..

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: |
            burrito_out/hexdocs_mcp_windows.exe
            burrito_out/hexdocs_mcp_linux
            burrito_out/hexdocs_mcp_macos
            burrito_out/hexdocs_mcp_macos_arm

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            burrito_out/hexdocs_mcp_windows.exe
            burrito_out/hexdocs_mcp_linux
            burrito_out/hexdocs_mcp_macos
            burrito_out/hexdocs_mcp_macos_arm
            burrito_out/SHA256SUMS
            burrito_out/SHA256SUMS.asc
            burrito_out/SIGNING_KEY.asc
        if: startsWith(github.ref, 'refs/tags/')

  test:
    name: Test Binaries
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            binary: hexdocs_mcp_linux
            chmod: true
          - os: macos-latest
            binary: hexdocs_mcp_macos_arm
            chmod: true
          - os: windows-latest
            binary: hexdocs_mcp_windows.exe
            chmod: false
    
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: binaries
      
      - name: Make binary executable
        if: matrix.chmod
        run: chmod +x ${{ matrix.binary }}
        shell: bash
      
      - name: Install Elixir (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          wget https://packages.erlang-solutions.com/erlang-solutions_2.0_all.deb
          sudo dpkg -i erlang-solutions_2.0_all.deb
          sudo apt-get update
          sudo apt-get install -y esl-erlang elixir
          mix local.hex --force
          mix local.rebar --force
        shell: bash
      
      - name: Install Elixir (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install erlang elixir
          mix local.hex --force
          mix local.rebar --force
        shell: bash
      
      - name: Install Elixir (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install elixir
          mix local.hex --force
          mix local.rebar --force
        shell: pwsh
      
      - name: Install Ollama (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          curl -fsSL https://ollama.com/install.sh | sh
          ollama serve &
          sleep 5  # Give Ollama time to start
          # Pull the embedding model we'll use
          ollama pull nomic-embed-text
        shell: bash
      
      - name: Set up Homebrew
        if: matrix.os == 'macos-latest'
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master
      
      - name: Install Ollama (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install --cask ollama
          
          ollama serve &
          sleep 5  # Give Ollama time to start
          
          # Pull the embedding model we'll use
          ollama pull nomic-embed-text
        shell: bash
      
      - name: Install Ollama (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          # Download and install Ollama for Windows
          Invoke-WebRequest -Uri "https://ollama.com/download/ollama-windows-amd64.zip" -OutFile "ollama.zip"
          Expand-Archive -Path "ollama.zip" -DestinationPath "C:\ollama"
          # Start Ollama as a background process
          Start-Process -FilePath "C:\ollama\ollama.exe" -ArgumentList "serve" -NoNewWindow
          Start-Sleep -Seconds 5  # Give Ollama time to start
          # Pull the embedding model we'll use
          C:\ollama\ollama.exe pull nomic-embed-text
        shell: pwsh
      
      - name: Create test project (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p test_project
          cd test_project
          cat > mix.exs << 'EOF'
          defmodule TestProject.MixProject do
            use Mix.Project
          
            def project do
              [
                app: :test_project,
                version: "0.1.0",
                deps: deps()
              ]
            end
          
            defp deps do
              [
                {:phoenix, "~> 1.7.0"},
                {:ecto, "~> 3.10"}
              ]
            end
          end
          EOF
          cd ..
        shell: bash
      
      - name: Create test project (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir test_project
          cd test_project
          @'
          defmodule TestProject.MixProject do
            use Mix.Project
          
            def project do
              [
                app: :test_project,
                version: "0.1.0",
                deps: deps()
              ]
            end
          
            defp deps do
              [
                {:phoenix, "~> 1.7.0"},
                {:ecto, "~> 3.10"}
              ]
            end
          end
          '@ | Out-File -FilePath mix.exs -Encoding utf8
          cd ..
        shell: pwsh
      
      - name: Test help command
        run: ./${{ matrix.binary }} --help
        shell: bash
      
      - name: Test fetch command help
        run: ./${{ matrix.binary }} fetch --help
        shell: bash
      
      - name: Test search command help
        run: ./${{ matrix.binary }} search --help
        shell: bash
      
      - name: Test fetch specific package
        run: ./${{ matrix.binary }} fetch phoenix
        shell: bash
      
      - name: Test fetch specific package with version
        run: ./${{ matrix.binary }} fetch ecto 3.10.3
        shell: bash
      
      - name: Test fetch with custom model
        run: ./${{ matrix.binary }} fetch jason --model nomic-embed-text
        shell: bash
      
      - name: Test fetch with force option
        run: ./${{ matrix.binary }} fetch phoenix --force
        shell: bash
      
      - name: Test fetch from project
        run: ./${{ matrix.binary }} fetch --project test_project/mix.exs
        shell: bash
      
      - name: Test fetch specific package from project
        run: ./${{ matrix.binary }} fetch phoenix --project test_project/mix.exs
        shell: bash
      
      - name: Test search with query
        run: ./${{ matrix.binary }} search -q "what is ecto?"
        shell: bash
      
      - name: Test search in specific package
        run: ./${{ matrix.binary }} search phoenix -q "how to create a channel"
        shell: bash
      
      - name: Test search in specific package version
        run: ./${{ matrix.binary }} search ecto 3.10.3 -q "how to use schemas"
        shell: bash
      
      - name: Test search with custom model
        run: ./${{ matrix.binary }} search phoenix -q "router configuration" --model nomic-embed-text
        shell: bash
      
      - name: Test search with custom limit
        run: ./${{ matrix.binary }} search phoenix -q "phoenix controller" --limit 5
        shell: bash
        
      - name: Test invalid command handling
        run: |
          ./${{ matrix.binary }} invalid_command || echo "Expected error, command continued"
        shell: bash
      